From c3e51f4a921cab122c148245c89ea1b6af1e986c Mon Sep 17 00:00:00 2001
From: Vito Caputo <vito.caputo@coreos.com>
Date: Mon, 16 Mar 2015 15:10:15 -0700
Subject: [PATCH 1/4] nspawn: add --keep-fd support

This enables inheriting a file from the executing process which persists
for the duration of the nspawn parent process.  Useful in implementing a
robust lifecycle reference tied to the nspawn container, which when
combined with advisory locking can also provide a simple event mechanism
triggered at container exit.

[patch ported to v219 -alban]
---
 src/nspawn/nspawn.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index fb67251..b7c9da5 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -178,6 +178,7 @@ static bool arg_quiet = false;
 static bool arg_share_system = false;
 static bool arg_register = true;
 static bool arg_keep_unit = false;
+static int arg_keep_fd = -1;
 static char **arg_network_interfaces = NULL;
 static char **arg_network_macvlan = NULL;
 static char **arg_network_ipvlan = NULL;
@@ -246,6 +247,7 @@ static void help(void) {
                "     --keep-unit            Do not register a scope for the machine, reuse\n"
                "                            the service unit nspawn is running in\n"
                "     --volatile[=MODE]      Run the system in volatile mode\n"
+               "     --keep-fd=FDNUM        Do not close the specified file descriptor\n"
                , program_invocation_short_name);
 }
 
@@ -287,6 +289,7 @@ static int parse_argv(int argc, char *argv[]) {
                 ARG_SHARE_SYSTEM,
                 ARG_REGISTER,
                 ARG_KEEP_UNIT,
+                ARG_KEEP_FD,
                 ARG_NETWORK_INTERFACE,
                 ARG_NETWORK_MACVLAN,
                 ARG_NETWORK_IPVLAN,
@@ -322,6 +325,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "share-system",          no_argument,       NULL, ARG_SHARE_SYSTEM      },
                 { "register",              required_argument, NULL, ARG_REGISTER          },
                 { "keep-unit",             no_argument,       NULL, ARG_KEEP_UNIT         },
+                { "keep-fd",               required_argument, NULL, ARG_KEEP_FD           },
                 { "network-interface",     required_argument, NULL, ARG_NETWORK_INTERFACE },
                 { "network-macvlan",       required_argument, NULL, ARG_NETWORK_MACVLAN   },
                 { "network-ipvlan",        required_argument, NULL, ARG_NETWORK_IPVLAN    },
@@ -643,6 +647,14 @@ static int parse_argv(int argc, char *argv[]) {
                         arg_keep_unit = true;
                         break;
 
+                case ARG_KEEP_FD:
+                        r = safe_atoi(optarg, &arg_keep_fd);
+                        if (r < 0) {
+                                log_error("Failed to parse --keep-fd= argument: %s", optarg);
+                                return r;
+                        }
+                        break;
+
                 case ARG_PERSONALITY:
 
                         arg_personality = personality_from_string(optarg);
@@ -3614,9 +3626,41 @@ int main(int argc, char *argv[]) {
                         goto finish;
                 }
         }
+
+        /* if we're keeping an fd open add it to the listen fds set temporarily across fdset_close_others() */
+        if (arg_keep_fd >= 0) {
+                if (!fds) {
+                        fds = fdset_new();
+                        if (!fds) {
+                                r = log_oom();
+                                goto finish;
+                        }
+                }
+                r = fdset_put(fds, arg_keep_fd);
+                if (r < 0) {
+                        log_error_errno(r, "Failed to add kept fd: %m");
+                        goto finish;
+                }
+        }
+
         fdset_close_others(fds);
         log_open();
 
+        if (arg_keep_fd >= 0) {
+                r = fdset_remove(fds, arg_keep_fd);
+                if (r < 0) {
+                        log_error_errno(r, "Failed to remove kept fd: %m");
+                        goto finish;
+                }
+
+                /* ensure the kept fd is closed in the child, only the parent keeps it around. */
+                r = fd_cloexec(arg_keep_fd, true);
+                if (r < 0) {
+                        log_error_errno(r, "Failed to set cloexec on kept fd: %m");
+                        goto finish;
+                }
+        }
+
         if (arg_directory) {
                 assert(!arg_image);
 
-- 
2.1.4

