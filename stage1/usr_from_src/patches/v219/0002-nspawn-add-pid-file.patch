From 30b585a02cfad4c0f420f70146bb6bc4566def85 Mon Sep 17 00:00:00 2001
From: Vito Caputo <vito.caputo@coreos.com>
Date: Mon, 16 Mar 2015 15:13:49 -0700
Subject: [PATCH 2/4] nspawn: add --pid-file

Simple mechanism for recording the container's pid independent of any external
daemons/systemd services.

[patch ported to v219 -alban]
---
 src/nspawn/nspawn.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index b7c9da5..5ea07c4 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -179,6 +179,7 @@ static bool arg_share_system = false;
 static bool arg_register = true;
 static bool arg_keep_unit = false;
 static int arg_keep_fd = -1;
+static const char *arg_pid_file = NULL;
 static char **arg_network_interfaces = NULL;
 static char **arg_network_macvlan = NULL;
 static char **arg_network_ipvlan = NULL;
@@ -248,6 +249,7 @@ static void help(void) {
                "                            the service unit nspawn is running in\n"
                "     --volatile[=MODE]      Run the system in volatile mode\n"
                "     --keep-fd=FDNUM        Do not close the specified file descriptor\n"
+               "     --pid-file=FILE        Write child pid to FILE\n"
                , program_invocation_short_name);
 }
 
@@ -290,6 +292,7 @@ static int parse_argv(int argc, char *argv[]) {
                 ARG_REGISTER,
                 ARG_KEEP_UNIT,
                 ARG_KEEP_FD,
+                ARG_PID_FILE,
                 ARG_NETWORK_INTERFACE,
                 ARG_NETWORK_MACVLAN,
                 ARG_NETWORK_IPVLAN,
@@ -326,6 +329,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "register",              required_argument, NULL, ARG_REGISTER          },
                 { "keep-unit",             no_argument,       NULL, ARG_KEEP_UNIT         },
                 { "keep-fd",               required_argument, NULL, ARG_KEEP_FD           },
+                { "pid-file",              required_argument, NULL, ARG_PID_FILE          },
                 { "network-interface",     required_argument, NULL, ARG_NETWORK_INTERFACE },
                 { "network-macvlan",       required_argument, NULL, ARG_NETWORK_MACVLAN   },
                 { "network-ipvlan",        required_argument, NULL, ARG_NETWORK_IPVLAN    },
@@ -655,6 +659,10 @@ static int parse_argv(int argc, char *argv[]) {
                         }
                         break;
 
+                case ARG_PID_FILE:
+                        arg_pid_file = optarg;
+                        break;
+
                 case ARG_PERSONALITY:
 
                         arg_personality = personality_from_string(optarg);
@@ -3495,6 +3503,13 @@ static int wait_for_container(pid_t pid, ContainerStatus *container) {
         return r;
 }
 
+static int write_pid(const char *f, int pid) {
+        char pid_str[13]; /* -2147483646\n\0 */
+
+        snprintf(pid_str, sizeof(pid_str), "%i\n", pid);
+        return write_string_file_atomic(f, pid_str);
+}
+
 static void nop_handler(int sig) {}
 
 static int on_orderly_shutdown(sd_event_source *s, const struct signalfd_siginfo *si, void *userdata) {
@@ -4237,6 +4252,14 @@ int main(int argc, char *argv[]) {
                                 _cleanup_rtnl_unref_ sd_rtnl *rtnl = NULL;
                                 char last_char = 0;
 
+                                if (arg_pid_file) {
+                                        r = write_pid(arg_pid_file, pid);
+                                        if (r < 0) {
+                                                log_error_errno(r, "Failed to write pid file: %m");
+                                                goto finish;
+                                        }
+                                }
+
                                 sd_notifyf(false,
                                            "READY=1\n"
                                            "STATUS=Container running.\n"
-- 
2.1.4

