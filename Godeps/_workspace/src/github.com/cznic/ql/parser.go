// Copyright (c) 2014 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Inital yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ goyacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package ql

import __yyfmt__ "fmt"

import (
	"fmt"

	"github.com/coreos/rocket/Godeps/_workspace/src/github.com/cznic/mathutil"
)

type yySymType struct {
	yys  int
	line int
	col  int
	item interface{}
	list []interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57428
	yyEOFCode      = -1
	add            = 57345
	alter          = 57346
	and            = 57347
	andand         = 57348
	andnot         = 57349
	as             = 57350
	asc            = 57351
	begin          = 57352
	between        = 57353
	bigIntType     = 57354
	bigRatType     = 57355
	blobType       = 57356
	boolType       = 57357
	by             = 57358
	byteType       = 57359
	column         = 57360
	commit         = 57361
	complex128Type = 57362
	complex64Type  = 57363
	create         = 57364
	deleteKwd      = 57365
	desc           = 57366
	distinct       = 57367
	drop           = 57368
	durationType   = 57369
	eq             = 57370
	yyErrCode      = 57344
	exists         = 57371
	falseKwd       = 57372
	float32Type    = 57374
	float64Type    = 57375
	floatLit       = 57376
	floatType      = 57373
	from           = 57377
	ge             = 57378
	group          = 57379
	identifier     = 57380
	ifKwd          = 57381
	imaginaryLit   = 57382
	in             = 57383
	index          = 57384
	insert         = 57385
	int16Type      = 57387
	int32Type      = 57388
	int64Type      = 57389
	int8Type       = 57390
	intLit         = 57392
	intType        = 57386
	into           = 57391
	is             = 57393
	le             = 57394
	like           = 57395
	limit          = 57396
	lsh            = 57397
	neq            = 57398
	not            = 57399
	null           = 57400
	offset         = 57401
	on             = 57402
	or             = 57403
	order          = 57404
	oror           = 57405
	qlParam        = 57406
	rollback       = 57407
	rsh            = 57408
	runeType       = 57409
	selectKwd      = 57410
	set            = 57411
	stringLit      = 57413
	stringType     = 57412
	tableKwd       = 57414
	timeType       = 57415
	transaction    = 57416
	trueKwd        = 57417
	truncate       = 57418
	uint16Type     = 57420
	uint32Type     = 57421
	uint64Type     = 57422
	uint8Type      = 57423
	uintType       = 57419
	unique         = 57424
	update         = 57425
	values         = 57426
	where          = 57427

	yyMaxDepth = 200
	yyTabOfs   = -204
)

var (
	yyXLAT = map[int]int{
		59:    0,   // ';' (179x)
		-1:    1,   // $end (178x)
		41:    2,   // ')' (152x)
		44:    3,   // ',' (120x)
		40:    4,   // '(' (119x)
		43:    5,   // '+' (103x)
		45:    6,   // '-' (103x)
		94:    7,   // '^' (103x)
		57401: 8,   // offset (100x)
		57396: 9,   // limit (97x)
		57380: 10,  // identifier (87x)
		57404: 11,  // order (85x)
		57427: 12,  // where (80x)
		57379: 13,  // group (75x)
		57403: 14,  // or (74x)
		57405: 15,  // oror (74x)
		57377: 16,  // from (72x)
		57351: 17,  // asc (68x)
		57366: 18,  // desc (68x)
		93:    19,  // ']' (67x)
		57350: 20,  // as (66x)
		58:    21,  // ':' (64x)
		57347: 22,  // and (64x)
		57348: 23,  // andand (62x)
		124:   24,  // '|' (55x)
		57399: 25,  // not (55x)
		57354: 26,  // bigIntType (54x)
		57355: 27,  // bigRatType (54x)
		57356: 28,  // blobType (54x)
		57357: 29,  // boolType (54x)
		57359: 30,  // byteType (54x)
		57362: 31,  // complex128Type (54x)
		57363: 32,  // complex64Type (54x)
		57369: 33,  // durationType (54x)
		57374: 34,  // float32Type (54x)
		57375: 35,  // float64Type (54x)
		57373: 36,  // floatType (54x)
		57387: 37,  // int16Type (54x)
		57388: 38,  // int32Type (54x)
		57389: 39,  // int64Type (54x)
		57390: 40,  // int8Type (54x)
		57386: 41,  // intType (54x)
		57400: 42,  // null (54x)
		57409: 43,  // runeType (54x)
		57412: 44,  // stringType (54x)
		57415: 45,  // timeType (54x)
		57420: 46,  // uint16Type (54x)
		57421: 47,  // uint32Type (54x)
		57422: 48,  // uint64Type (54x)
		57423: 49,  // uint8Type (54x)
		57419: 50,  // uintType (54x)
		57353: 51,  // between (53x)
		57383: 52,  // in (53x)
		60:    53,  // '<' (52x)
		62:    54,  // '>' (52x)
		57370: 55,  // eq (52x)
		57372: 56,  // falseKwd (52x)
		57376: 57,  // floatLit (52x)
		57378: 58,  // ge (52x)
		57382: 59,  // imaginaryLit (52x)
		57392: 60,  // intLit (52x)
		57393: 61,  // is (52x)
		57394: 62,  // le (52x)
		57395: 63,  // like (52x)
		57398: 64,  // neq (52x)
		57406: 65,  // qlParam (52x)
		57413: 66,  // stringLit (52x)
		57417: 67,  // trueKwd (52x)
		33:    68,  // '!' (48x)
		57498: 69,  // Type (47x)
		42:    70,  // '*' (46x)
		57443: 71,  // Conversion (46x)
		57470: 72,  // Literal (46x)
		57471: 73,  // Operand (46x)
		57474: 74,  // PrimaryExpression (46x)
		57477: 75,  // QualifiedIdent (46x)
		37:    76,  // '%' (43x)
		38:    77,  // '&' (43x)
		47:    78,  // '/' (43x)
		57349: 79,  // andnot (43x)
		57397: 80,  // lsh (43x)
		57408: 81,  // rsh (43x)
		57499: 82,  // UnaryExpr (42x)
		57476: 83,  // PrimaryTerm (35x)
		57475: 84,  // PrimaryFactor (31x)
		91:    85,  // '[' (30x)
		57459: 86,  // Factor (20x)
		57460: 87,  // Factor1 (20x)
		57496: 88,  // Term (19x)
		57455: 89,  // Expression (18x)
		57504: 90,  // logOr (12x)
		57438: 91,  // ColumnName (10x)
		57495: 92,  // TableName (9x)
		57410: 93,  // selectKwd (7x)
		57456: 94,  // ExpressionList (6x)
		57435: 95,  // Call (5x)
		57465: 96,  // Index (5x)
		57492: 97,  // Slice (5x)
		57437: 98,  // ColumnDef (4x)
		57368: 99,  // drop (4x)
		57371: 100, // exists (4x)
		57381: 101, // ifKwd (4x)
		57384: 102, // index (4x)
		57484: 103, // SelectStmt (4x)
		57414: 104, // tableKwd (4x)
		57426: 105, // values (4x)
		57502: 106, // WhereClause (4x)
		61:    107, // '=' (2x)
		57345: 108, // add (2x)
		57346: 109, // alter (2x)
		57429: 110, // AlterTableStmt (2x)
		57430: 111, // Assignment (2x)
		57352: 112, // begin (2x)
		57434: 113, // BeginTransactionStmt (2x)
		57358: 114, // by (2x)
		57439: 115, // ColumnNameList (2x)
		57361: 116, // commit (2x)
		57442: 117, // CommitStmt (2x)
		57364: 118, // create (2x)
		57445: 119, // CreateIndexStmt (2x)
		57447: 120, // CreateTableStmt (2x)
		57448: 121, // CreateTableStmt1 (2x)
		57449: 122, // CreateTableStmt2 (2x)
		57450: 123, // DeleteFromStmt (2x)
		57365: 124, // deleteKwd (2x)
		57452: 125, // DropIndexStmt (2x)
		57453: 126, // DropTableStmt (2x)
		57454: 127, // EmptyStmt (2x)
		57461: 128, // Field (2x)
		57464: 129, // GroupByClause (2x)
		57385: 130, // insert (2x)
		57466: 131, // InsertIntoStmt (2x)
		57503: 132, // logAnd (2x)
		57472: 133, // OrderBy (2x)
		57478: 134, // RecordSet (2x)
		57479: 135, // RecordSet1 (2x)
		57407: 136, // rollback (2x)
		57483: 137, // RollbackStmt (2x)
		57487: 138, // SelectStmtGroup (2x)
		57488: 139, // SelectStmtLimit (2x)
		57489: 140, // SelectStmtOffset (2x)
		57490: 141, // SelectStmtOrder (2x)
		57491: 142, // SelectStmtWhere (2x)
		57411: 143, // set (2x)
		57493: 144, // Statement (2x)
		57418: 145, // truncate (2x)
		57497: 146, // TruncateTableStmt (2x)
		57425: 147, // update (2x)
		57500: 148, // UpdateStmt (2x)
		46:    149, // '.' (1x)
		57431: 150, // AssignmentList (1x)
		57432: 151, // AssignmentList1 (1x)
		57433: 152, // AssignmentList2 (1x)
		57436: 153, // Call1 (1x)
		57360: 154, // column (1x)
		57440: 155, // ColumnNameList1 (1x)
		57441: 156, // ColumnNameList2 (1x)
		57444: 157, // CreateIndexIfNotExists (1x)
		57446: 158, // CreateIndexStmtUnique (1x)
		57367: 159, // distinct (1x)
		57451: 160, // DropIndexIfExists (1x)
		57457: 161, // ExpressionList1 (1x)
		57458: 162, // ExpressionList2 (1x)
		57462: 163, // Field1 (1x)
		57463: 164, // FieldList (1x)
		57467: 165, // InsertIntoStmt1 (1x)
		57468: 166, // InsertIntoStmt2 (1x)
		57469: 167, // InsertIntoStmt3 (1x)
		57391: 168, // into (1x)
		57402: 169, // on (1x)
		57473: 170, // OrderBy1 (1x)
		57505: 171, // oSet (1x)
		57480: 172, // RecordSet11 (1x)
		57481: 173, // RecordSet2 (1x)
		57482: 174, // RecordSetList (1x)
		57485: 175, // SelectStmtDistinct (1x)
		57486: 176, // SelectStmtFieldList (1x)
		57494: 177, // StatementList (1x)
		57416: 178, // transaction (1x)
		57424: 179, // unique (1x)
		57501: 180, // UpdateStmt1 (1x)
		57428: 181, // $default (0x)
		57344: 182, // error (0x)
	}

	yySymNames = []string{
		"';'",
		"$end",
		"')'",
		"','",
		"'('",
		"'+'",
		"'-'",
		"'^'",
		"offset",
		"limit",
		"identifier",
		"order",
		"where",
		"group",
		"or",
		"oror",
		"from",
		"asc",
		"desc",
		"']'",
		"as",
		"':'",
		"and",
		"andand",
		"'|'",
		"not",
		"bigIntType",
		"bigRatType",
		"blobType",
		"boolType",
		"byteType",
		"complex128Type",
		"complex64Type",
		"durationType",
		"float32Type",
		"float64Type",
		"floatType",
		"int16Type",
		"int32Type",
		"int64Type",
		"int8Type",
		"intType",
		"null",
		"runeType",
		"stringType",
		"timeType",
		"uint16Type",
		"uint32Type",
		"uint64Type",
		"uint8Type",
		"uintType",
		"between",
		"in",
		"'<'",
		"'>'",
		"eq",
		"falseKwd",
		"floatLit",
		"ge",
		"imaginaryLit",
		"intLit",
		"is",
		"le",
		"like",
		"neq",
		"qlParam",
		"stringLit",
		"trueKwd",
		"'!'",
		"Type",
		"'*'",
		"Conversion",
		"Literal",
		"Operand",
		"PrimaryExpression",
		"QualifiedIdent",
		"'%'",
		"'&'",
		"'/'",
		"andnot",
		"lsh",
		"rsh",
		"UnaryExpr",
		"PrimaryTerm",
		"PrimaryFactor",
		"'['",
		"Factor",
		"Factor1",
		"Term",
		"Expression",
		"logOr",
		"ColumnName",
		"TableName",
		"selectKwd",
		"ExpressionList",
		"Call",
		"Index",
		"Slice",
		"ColumnDef",
		"drop",
		"exists",
		"ifKwd",
		"index",
		"SelectStmt",
		"tableKwd",
		"values",
		"WhereClause",
		"'='",
		"add",
		"alter",
		"AlterTableStmt",
		"Assignment",
		"begin",
		"BeginTransactionStmt",
		"by",
		"ColumnNameList",
		"commit",
		"CommitStmt",
		"create",
		"CreateIndexStmt",
		"CreateTableStmt",
		"CreateTableStmt1",
		"CreateTableStmt2",
		"DeleteFromStmt",
		"deleteKwd",
		"DropIndexStmt",
		"DropTableStmt",
		"EmptyStmt",
		"Field",
		"GroupByClause",
		"insert",
		"InsertIntoStmt",
		"logAnd",
		"OrderBy",
		"RecordSet",
		"RecordSet1",
		"rollback",
		"RollbackStmt",
		"SelectStmtGroup",
		"SelectStmtLimit",
		"SelectStmtOffset",
		"SelectStmtOrder",
		"SelectStmtWhere",
		"set",
		"Statement",
		"truncate",
		"TruncateTableStmt",
		"update",
		"UpdateStmt",
		"'.'",
		"AssignmentList",
		"AssignmentList1",
		"AssignmentList2",
		"Call1",
		"column",
		"ColumnNameList1",
		"ColumnNameList2",
		"CreateIndexIfNotExists",
		"CreateIndexStmtUnique",
		"distinct",
		"DropIndexIfExists",
		"ExpressionList1",
		"ExpressionList2",
		"Field1",
		"FieldList",
		"InsertIntoStmt1",
		"InsertIntoStmt2",
		"InsertIntoStmt3",
		"into",
		"on",
		"OrderBy1",
		"oSet",
		"RecordSet11",
		"RecordSet2",
		"RecordSetList",
		"SelectStmtDistinct",
		"SelectStmtFieldList",
		"StatementList",
		"transaction",
		"unique",
		"UpdateStmt1",
		"$default",
		"error",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {110, 5},
		2:   {110, 6},
		3:   {111, 3},
		4:   {150, 3},
		5:   {151, 0},
		6:   {151, 3},
		7:   {152, 0},
		8:   {152, 1},
		9:   {113, 2},
		10:  {95, 3},
		11:  {153, 0},
		12:  {153, 1},
		13:  {98, 2},
		14:  {91, 1},
		15:  {115, 3},
		16:  {155, 0},
		17:  {155, 3},
		18:  {156, 0},
		19:  {156, 1},
		20:  {117, 1},
		21:  {71, 4},
		22:  {119, 10},
		23:  {119, 12},
		24:  {157, 0},
		25:  {157, 3},
		26:  {158, 0},
		27:  {158, 1},
		28:  {120, 8},
		29:  {120, 11},
		30:  {121, 0},
		31:  {121, 3},
		32:  {122, 0},
		33:  {122, 1},
		34:  {123, 3},
		35:  {123, 4},
		36:  {125, 4},
		37:  {160, 0},
		38:  {160, 2},
		39:  {126, 3},
		40:  {126, 5},
		41:  {127, 0},
		42:  {89, 1},
		43:  {89, 3},
		44:  {90, 1},
		45:  {90, 1},
		46:  {94, 3},
		47:  {161, 0},
		48:  {161, 3},
		49:  {162, 0},
		50:  {162, 1},
		51:  {86, 1},
		52:  {86, 5},
		53:  {86, 6},
		54:  {86, 5},
		55:  {86, 6},
		56:  {86, 3},
		57:  {86, 4},
		58:  {87, 1},
		59:  {87, 3},
		60:  {87, 3},
		61:  {87, 3},
		62:  {87, 3},
		63:  {87, 3},
		64:  {87, 3},
		65:  {87, 3},
		66:  {128, 2},
		67:  {163, 0},
		68:  {163, 2},
		69:  {164, 1},
		70:  {164, 3},
		71:  {129, 3},
		72:  {96, 3},
		73:  {131, 10},
		74:  {131, 5},
		75:  {165, 0},
		76:  {165, 3},
		77:  {166, 0},
		78:  {166, 5},
		79:  {167, 0},
		80:  {167, 1},
		81:  {72, 1},
		82:  {72, 1},
		83:  {72, 1},
		84:  {72, 1},
		85:  {72, 1},
		86:  {72, 1},
		87:  {72, 1},
		88:  {73, 1},
		89:  {73, 1},
		90:  {73, 1},
		91:  {73, 3},
		92:  {133, 4},
		93:  {170, 0},
		94:  {170, 1},
		95:  {170, 1},
		96:  {74, 1},
		97:  {74, 1},
		98:  {74, 2},
		99:  {74, 2},
		100: {74, 2},
		101: {84, 1},
		102: {84, 3},
		103: {84, 3},
		104: {84, 3},
		105: {84, 3},
		106: {83, 1},
		107: {83, 3},
		108: {83, 3},
		109: {83, 3},
		110: {83, 3},
		111: {83, 3},
		112: {83, 3},
		113: {83, 3},
		114: {75, 1},
		115: {75, 3},
		116: {134, 2},
		117: {135, 1},
		118: {135, 4},
		119: {172, 0},
		120: {172, 1},
		121: {173, 0},
		122: {173, 2},
		123: {174, 1},
		124: {174, 3},
		125: {137, 1},
		126: {103, 10},
		127: {103, 11},
		128: {139, 0},
		129: {139, 2},
		130: {140, 0},
		131: {140, 2},
		132: {175, 0},
		133: {175, 1},
		134: {176, 1},
		135: {176, 1},
		136: {176, 2},
		137: {142, 0},
		138: {142, 1},
		139: {138, 0},
		140: {138, 1},
		141: {141, 0},
		142: {141, 1},
		143: {97, 3},
		144: {97, 4},
		145: {97, 4},
		146: {97, 5},
		147: {144, 1},
		148: {144, 1},
		149: {144, 1},
		150: {144, 1},
		151: {144, 1},
		152: {144, 1},
		153: {144, 1},
		154: {144, 1},
		155: {144, 1},
		156: {144, 1},
		157: {144, 1},
		158: {144, 1},
		159: {144, 1},
		160: {144, 1},
		161: {177, 1},
		162: {177, 3},
		163: {92, 1},
		164: {88, 1},
		165: {88, 3},
		166: {132, 1},
		167: {132, 1},
		168: {146, 3},
		169: {69, 1},
		170: {69, 1},
		171: {69, 1},
		172: {69, 1},
		173: {69, 1},
		174: {69, 1},
		175: {69, 1},
		176: {69, 1},
		177: {69, 1},
		178: {69, 1},
		179: {69, 1},
		180: {69, 1},
		181: {69, 1},
		182: {69, 1},
		183: {69, 1},
		184: {69, 1},
		185: {69, 1},
		186: {69, 1},
		187: {69, 1},
		188: {69, 1},
		189: {69, 1},
		190: {69, 1},
		191: {69, 1},
		192: {69, 1},
		193: {148, 5},
		194: {180, 0},
		195: {180, 1},
		196: {82, 1},
		197: {82, 2},
		198: {82, 2},
		199: {82, 2},
		200: {82, 2},
		201: {106, 2},
		202: {171, 0},
		203: {171, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [331][]uint16{
		// 0
		{163, 163, 93: 214, 99: 211, 103: 226, 109: 206, 216, 112: 207, 217, 116: 208, 218, 209, 219, 220, 123: 221, 210, 222, 223, 215, 130: 212, 224, 136: 213, 225, 144: 229, 230, 227, 231, 228, 177: 205},
		{533, 204},
		{104: 526},
		{178: 525},
		{184, 184},
		// 5
		{102: 178, 104: 491, 158: 489, 179: 490},
		{16: 486},
		{102: 476, 104: 477},
		{168: 459},
		{79, 79},
		// 10
		{4: 72, 72, 72, 72, 10: 72, 26: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 56: 72, 72, 59: 72, 72, 65: 72, 72, 72, 72, 70: 72, 159: 402, 175: 401},
		{57, 57},
		{56, 56},
		{55, 55},
		{54, 54},
		// 15
		{53, 53},
		{52, 52},
		{51, 51},
		{50, 50},
		{49, 49},
		// 20
		{48, 48},
		{47, 47},
		{46, 46},
		{45, 45},
		{44, 44},
		// 25
		{43, 43},
		{104: 399},
		{10: 232, 92: 233},
		{41, 41, 4: 41, 10: 41, 12: 41, 93: 41, 99: 41, 105: 41, 108: 41, 143: 41},
		{10: 2, 143: 235, 171: 234},
		// 30
		{10: 238, 91: 236, 111: 237, 150: 239},
		{10: 1},
		{107: 397},
		{199, 199, 3: 199, 12: 199, 151: 393},
		{190, 190, 190, 190, 8: 190, 190, 11: 190, 26: 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 43: 190, 190, 190, 190, 190, 190, 190, 190, 107: 190},
		// 35
		{10, 10, 12: 242, 106: 241, 180: 240},
		{11, 11},
		{9, 9},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 245},
		{4: 390},
		// 40
		{162, 162, 162, 162, 8: 162, 162, 11: 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 311, 310, 132: 309},
		{3, 3, 3, 8: 3, 3, 11: 3, 13: 3, 306, 305, 90: 304},
		{153, 153, 153, 153, 8: 153, 153, 11: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 25: 356, 51: 357, 355, 362, 360, 364, 58: 359, 61: 358, 361, 365, 363},
		{146, 146, 146, 146, 5: 350, 349, 347, 146, 146, 11: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 348, 146, 51: 146, 146, 146, 146, 146, 58: 146, 61: 146, 146, 146, 146},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 11: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 51: 123, 123, 123, 123, 123, 58: 123, 61: 123, 123, 123, 123, 70: 123, 76: 123, 123, 123, 123, 123, 123, 85: 123},
		// 45
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 11: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 51: 122, 122, 122, 122, 122, 58: 122, 61: 122, 122, 122, 122, 70: 122, 76: 122, 122, 122, 122, 122, 122, 85: 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 11: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 51: 121, 121, 121, 121, 121, 58: 121, 61: 121, 121, 121, 121, 70: 121, 76: 121, 121, 121, 121, 121, 121, 85: 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 11: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 51: 120, 120, 120, 120, 120, 58: 120, 61: 120, 120, 120, 120, 70: 120, 76: 120, 120, 120, 120, 120, 120, 85: 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 11: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 51: 119, 119, 119, 119, 119, 58: 119, 61: 119, 119, 119, 119, 70: 119, 76: 119, 119, 119, 119, 119, 119, 85: 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 11: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 51: 118, 118, 118, 118, 118, 58: 118, 61: 118, 118, 118, 118, 70: 118, 76: 118, 118, 118, 118, 118, 118, 85: 118},
		// 50
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 11: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 51: 117, 117, 117, 117, 117, 58: 117, 61: 117, 117, 117, 117, 70: 117, 76: 117, 117, 117, 117, 117, 117, 85: 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 11: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51: 116, 116, 116, 116, 116, 58: 116, 61: 116, 116, 116, 116, 70: 116, 76: 116, 116, 116, 116, 116, 116, 85: 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 11: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 51: 115, 115, 115, 115, 115, 58: 115, 61: 115, 115, 115, 115, 70: 115, 76: 115, 115, 115, 115, 115, 115, 85: 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 11: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 51: 114, 114, 114, 114, 114, 58: 114, 61: 114, 114, 114, 114, 70: 114, 76: 114, 114, 114, 114, 114, 114, 85: 114},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 345},
		// 55
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 11: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 51: 108, 108, 108, 108, 108, 58: 108, 61: 108, 108, 108, 108, 70: 108, 76: 108, 108, 108, 108, 108, 108, 85: 108},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 11: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 51: 107, 107, 107, 107, 107, 58: 107, 61: 107, 107, 107, 107, 70: 107, 76: 107, 107, 107, 107, 107, 107, 85: 107},
		{8, 8, 8, 8, 295, 8, 8, 8, 8, 8, 11: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 51: 8, 8, 8, 8, 8, 58: 8, 61: 8, 8, 8, 8, 70: 8, 76: 8, 8, 8, 8, 8, 8, 85: 296, 95: 299, 297, 298},
		{103, 103, 103, 103, 5: 103, 103, 103, 103, 103, 11: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 51: 103, 103, 103, 103, 103, 58: 103, 61: 103, 103, 103, 103, 70: 337, 76: 335, 332, 336, 331, 333, 334},
		{98, 98, 98, 98, 5: 98, 98, 98, 98, 98, 11: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 51: 98, 98, 98, 98, 98, 58: 98, 61: 98, 98, 98, 98, 70: 98, 76: 98, 98, 98, 98, 98, 98},
		// 60
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 11: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 51: 90, 90, 90, 90, 90, 58: 90, 61: 90, 90, 90, 90, 70: 90, 76: 90, 90, 90, 90, 90, 90, 85: 90, 149: 329},
		{40, 40, 40, 40, 8: 40, 40, 11: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33},
		// 65
		{32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28},
		// 70
		{27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23},
		// 75
		{22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18},
		// 80
		{17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13},
		// 85
		{12, 12, 12, 12, 12},
		{4: 258, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 69: 243, 71: 260, 255, 259, 328, 257},
		{4: 258, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 69: 243, 71: 260, 255, 259, 327, 257},
		{4: 258, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 69: 243, 71: 260, 255, 259, 326, 257},
		{4: 258, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 69: 243, 71: 260, 255, 259, 294, 257},
		// 90
		{4, 4, 4, 4, 295, 4, 4, 4, 4, 4, 11: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 51: 4, 4, 4, 4, 4, 58: 4, 61: 4, 4, 4, 4, 70: 4, 76: 4, 4, 4, 4, 4, 4, 85: 296, 95: 299, 297, 298},
		{2: 193, 4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 319, 153: 318},
		{4: 258, 293, 292, 290, 10: 264, 21: 301, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 300},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 11: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 51: 106, 106, 106, 106, 106, 58: 106, 61: 106, 106, 106, 106, 70: 106, 76: 106, 106, 106, 106, 106, 106, 85: 106},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 11: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 51: 105, 105, 105, 105, 105, 58: 105, 61: 105, 105, 105, 105, 70: 105, 76: 105, 105, 105, 105, 105, 105, 85: 105},
		// 95
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 11: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 51: 104, 104, 104, 104, 104, 58: 104, 61: 104, 104, 104, 104, 70: 104, 76: 104, 104, 104, 104, 104, 104, 85: 104},
		{14: 306, 305, 19: 313, 21: 314, 90: 304},
		{4: 258, 293, 292, 290, 10: 264, 19: 303, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 302},
		{14: 306, 305, 19: 307, 90: 304},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 11: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 51: 61, 61, 61, 61, 61, 58: 61, 61: 61, 61, 61, 61, 70: 61, 76: 61, 61, 61, 61, 61, 61, 85: 61},
		// 100
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 308},
		{4: 160, 160, 160, 160, 10: 160, 26: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 56: 160, 160, 59: 160, 160, 65: 160, 160, 160, 160},
		{4: 159, 159, 159, 159, 10: 159, 26: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 56: 159, 159, 59: 159, 159, 65: 159, 159, 159, 159},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 51: 60, 60, 60, 60, 60, 58: 60, 61: 60, 60, 60, 60, 70: 60, 76: 60, 60, 60, 60, 60, 60, 85: 60},
		{161, 161, 161, 161, 8: 161, 161, 11: 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 311, 310, 132: 309},
		// 105
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 312, 246},
		{4: 38, 38, 38, 38, 10: 38, 26: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 56: 38, 38, 59: 38, 38, 65: 38, 38, 38, 38},
		{4: 37, 37, 37, 37, 10: 37, 26: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 56: 37, 37, 59: 37, 37, 65: 37, 37, 37, 37},
		{39, 39, 39, 39, 8: 39, 39, 11: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 11: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 51: 132, 132, 132, 132, 132, 58: 132, 61: 132, 132, 132, 132, 70: 132, 76: 132, 132, 132, 132, 132, 132, 85: 132},
		// 110
		{4: 258, 293, 292, 290, 10: 264, 19: 316, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 315},
		{14: 306, 305, 19: 317, 90: 304},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 51: 59, 59, 59, 59, 59, 58: 59, 61: 59, 59, 59, 59, 70: 59, 76: 59, 59, 59, 59, 59, 59, 85: 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 51: 58, 58, 58, 58, 58, 58: 58, 61: 58, 58, 58, 58, 70: 58, 76: 58, 58, 58, 58, 58, 58, 85: 58},
		{2: 325},
		// 115
		{2: 192},
		{157, 157, 157, 157, 8: 157, 157, 14: 306, 305, 17: 157, 157, 90: 304, 161: 321},
		{155, 155, 155, 323, 8: 155, 155, 17: 155, 155, 162: 322},
		{158, 158, 158, 8: 158, 158, 17: 158, 158},
		{154, 154, 154, 4: 258, 293, 292, 290, 154, 154, 264, 17: 154, 154, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 324},
		// 120
		{156, 156, 156, 156, 8: 156, 156, 14: 306, 305, 17: 156, 156, 90: 304},
		{194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 11: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 51: 194, 194, 194, 194, 194, 58: 194, 61: 194, 194, 194, 194, 70: 194, 76: 194, 194, 194, 194, 194, 194, 85: 194},
		{5, 5, 5, 5, 295, 5, 5, 5, 5, 5, 11: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 51: 5, 5, 5, 5, 5, 58: 5, 61: 5, 5, 5, 5, 70: 5, 76: 5, 5, 5, 5, 5, 5, 85: 296, 95: 299, 297, 298},
		{6, 6, 6, 6, 295, 6, 6, 6, 6, 6, 11: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 51: 6, 6, 6, 6, 6, 58: 6, 61: 6, 6, 6, 6, 70: 6, 76: 6, 6, 6, 6, 6, 6, 85: 296, 95: 299, 297, 298},
		{7, 7, 7, 7, 295, 7, 7, 7, 7, 7, 11: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 51: 7, 7, 7, 7, 7, 58: 7, 61: 7, 7, 7, 7, 70: 7, 76: 7, 7, 7, 7, 7, 7, 85: 296, 95: 299, 297, 298},
		// 125
		{10: 330},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 11: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 51: 89, 89, 89, 89, 89, 58: 89, 61: 89, 89, 89, 89, 70: 89, 76: 89, 89, 89, 89, 89, 89, 85: 89},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 344},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 343},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 342},
		// 130
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 341},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 340},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 339},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 338},
		{91, 91, 91, 91, 5: 91, 91, 91, 91, 91, 11: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 51: 91, 91, 91, 91, 91, 58: 91, 61: 91, 91, 91, 91, 70: 91, 76: 91, 91, 91, 91, 91, 91},
		// 135
		{92, 92, 92, 92, 5: 92, 92, 92, 92, 92, 11: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 51: 92, 92, 92, 92, 92, 58: 92, 61: 92, 92, 92, 92, 70: 92, 76: 92, 92, 92, 92, 92, 92},
		{93, 93, 93, 93, 5: 93, 93, 93, 93, 93, 11: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 51: 93, 93, 93, 93, 93, 58: 93, 61: 93, 93, 93, 93, 70: 93, 76: 93, 93, 93, 93, 93, 93},
		{94, 94, 94, 94, 5: 94, 94, 94, 94, 94, 11: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51: 94, 94, 94, 94, 94, 58: 94, 61: 94, 94, 94, 94, 70: 94, 76: 94, 94, 94, 94, 94, 94},
		{95, 95, 95, 95, 5: 95, 95, 95, 95, 95, 11: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 51: 95, 95, 95, 95, 95, 58: 95, 61: 95, 95, 95, 95, 70: 95, 76: 95, 95, 95, 95, 95, 95},
		{96, 96, 96, 96, 5: 96, 96, 96, 96, 96, 11: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 51: 96, 96, 96, 96, 96, 58: 96, 61: 96, 96, 96, 96, 70: 96, 76: 96, 96, 96, 96, 96, 96},
		// 140
		{97, 97, 97, 97, 5: 97, 97, 97, 97, 97, 11: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 51: 97, 97, 97, 97, 97, 58: 97, 61: 97, 97, 97, 97, 70: 97, 76: 97, 97, 97, 97, 97, 97},
		{2: 346, 14: 306, 305, 90: 304},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 11: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 51: 113, 113, 113, 113, 113, 58: 113, 61: 113, 113, 113, 113, 70: 113, 76: 113, 113, 113, 113, 113, 113, 85: 113},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 354},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 353},
		// 145
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 352},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 351},
		{99, 99, 99, 99, 5: 99, 99, 99, 99, 99, 11: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 51: 99, 99, 99, 99, 99, 58: 99, 61: 99, 99, 99, 99, 70: 337, 76: 335, 332, 336, 331, 333, 334},
		{100, 100, 100, 100, 5: 100, 100, 100, 100, 100, 11: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 51: 100, 100, 100, 100, 100, 58: 100, 61: 100, 100, 100, 100, 70: 337, 76: 335, 332, 336, 331, 333, 334},
		{101, 101, 101, 101, 5: 101, 101, 101, 101, 101, 11: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 51: 101, 101, 101, 101, 101, 58: 101, 61: 101, 101, 101, 101, 70: 337, 76: 335, 332, 336, 331, 333, 334},
		// 150
		{102, 102, 102, 102, 5: 102, 102, 102, 102, 102, 11: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 51: 102, 102, 102, 102, 102, 58: 102, 61: 102, 102, 102, 102, 70: 337, 76: 335, 332, 336, 331, 333, 334},
		{4: 387},
		{51: 380, 379},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 376},
		{25: 374, 42: 373},
		// 155
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 372},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 371},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 370},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 369},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 368},
		// 160
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 367},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 366},
		{139, 139, 139, 139, 5: 350, 349, 347, 139, 139, 11: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 348, 139, 51: 139, 139, 139, 139, 139, 58: 139, 61: 139, 139, 139, 139},
		{140, 140, 140, 140, 5: 350, 349, 347, 140, 140, 11: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 348, 140, 51: 140, 140, 140, 140, 140, 58: 140, 61: 140, 140, 140, 140},
		{141, 141, 141, 141, 5: 350, 349, 347, 141, 141, 11: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 348, 141, 51: 141, 141, 141, 141, 141, 58: 141, 61: 141, 141, 141, 141},
		// 165
		{142, 142, 142, 142, 5: 350, 349, 347, 142, 142, 11: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 348, 142, 51: 142, 142, 142, 142, 142, 58: 142, 61: 142, 142, 142, 142},
		{143, 143, 143, 143, 5: 350, 349, 347, 143, 143, 11: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 348, 143, 51: 143, 143, 143, 143, 143, 58: 143, 61: 143, 143, 143, 143},
		{144, 144, 144, 144, 5: 350, 349, 347, 144, 144, 11: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 348, 144, 51: 144, 144, 144, 144, 144, 58: 144, 61: 144, 144, 144, 144},
		{145, 145, 145, 145, 5: 350, 349, 347, 145, 145, 11: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 348, 145, 51: 145, 145, 145, 145, 145, 58: 145, 61: 145, 145, 145, 145},
		{148, 148, 148, 148, 8: 148, 148, 11: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148},
		// 170
		{42: 375},
		{147, 147, 147, 147, 8: 147, 147, 11: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{5: 350, 349, 347, 22: 377, 24: 348},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 378},
		{150, 150, 150, 150, 5: 350, 349, 347, 150, 150, 11: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 348},
		// 175
		{4: 384},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 381},
		{5: 350, 349, 347, 22: 382, 24: 348},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 383},
		{149, 149, 149, 149, 5: 350, 349, 347, 149, 149, 11: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 348},
		// 180
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 385},
		{2: 386},
		{151, 151, 151, 151, 8: 151, 151, 11: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 388},
		{2: 389},
		// 185
		{152, 152, 152, 152, 8: 152, 152, 11: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 391},
		{2: 392, 14: 306, 305, 90: 304},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 11: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 51: 183, 183, 183, 183, 183, 58: 183, 61: 183, 183, 183, 183, 70: 183, 76: 183, 183, 183, 183, 183, 183, 85: 183},
		{197, 197, 3: 395, 12: 197, 152: 394},
		// 190
		{200, 200, 12: 200},
		{196, 196, 10: 238, 12: 196, 91: 236, 111: 396},
		{198, 198, 3: 198, 12: 198},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 398},
		{201, 201, 3: 201, 12: 201, 14: 306, 305, 90: 304},
		// 195
		{10: 232, 92: 400},
		{36, 36},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 407, 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 403, 128: 404, 164: 405, 176: 406},
		{4: 71, 71, 71, 71, 10: 71, 26: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 56: 71, 71, 59: 71, 71, 65: 71, 71, 71, 71, 70: 71},
		{3: 137, 14: 306, 305, 137, 20: 457, 90: 304, 163: 456},
		// 200
		{3: 135, 16: 135},
		{3: 454, 16: 69},
		{16: 408},
		{16: 70},
		{4: 411, 10: 410, 134: 412, 409, 174: 413},
		// 205
		{83, 83, 83, 83, 8: 83, 83, 11: 83, 83, 83, 20: 452, 173: 451},
		{87, 87, 87, 87, 8: 87, 87, 11: 87, 87, 87, 20: 87},
		{93: 214, 103: 447},
		{81, 81, 81, 81, 8: 81, 81, 11: 81, 81, 81},
		{67, 67, 67, 414, 8: 67, 67, 11: 67, 242, 67, 106: 416, 142: 415},
		// 210
		{67, 67, 67, 4: 411, 8: 67, 67, 410, 67, 242, 67, 106: 416, 134: 441, 409, 142: 442},
		{65, 65, 65, 8: 65, 65, 11: 65, 13: 417, 129: 419, 138: 418},
		{66, 66, 66, 8: 66, 66, 11: 66, 13: 66},
		{114: 434},
		{63, 63, 63, 8: 63, 63, 11: 420, 133: 422, 141: 421},
		// 215
		{64, 64, 64, 8: 64, 64, 11: 64},
		{114: 429},
		{76, 76, 76, 8: 76, 424, 139: 423},
		{62, 62, 62, 8: 62, 62},
		{74, 74, 74, 8: 427, 140: 426},
		// 220
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 425},
		{75, 75, 75, 8: 75, 14: 306, 305, 90: 304},
		{78, 78, 78},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 428},
		{73, 73, 73, 14: 306, 305, 90: 304},
		// 225
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 430},
		{111, 111, 111, 8: 111, 111, 17: 432, 433, 170: 431},
		{112, 112, 112, 8: 112, 112},
		{110, 110, 110, 8: 110, 110},
		{109, 109, 109, 8: 109, 109},
		// 230
		{10: 238, 91: 435, 115: 436},
		{188, 188, 188, 188, 8: 188, 188, 11: 188, 155: 437},
		{133, 133, 133, 8: 133, 133, 11: 133},
		{186, 186, 186, 439, 8: 186, 186, 11: 186, 156: 438},
		{189, 189, 189, 8: 189, 189, 11: 189},
		// 235
		{185, 185, 185, 8: 185, 185, 238, 185, 91: 440},
		{187, 187, 187, 187, 8: 187, 187, 11: 187},
		{80, 80, 80, 80, 8: 80, 80, 11: 80, 80, 80},
		{65, 65, 65, 8: 65, 65, 11: 65, 13: 417, 129: 419, 138: 443},
		{63, 63, 63, 8: 63, 63, 11: 420, 133: 422, 141: 444},
		// 240
		{76, 76, 76, 8: 76, 424, 139: 445},
		{74, 74, 74, 8: 427, 140: 446},
		{77, 77, 77},
		{449, 2: 85, 172: 448},
		{2: 450},
		// 245
		{2: 84},
		{86, 86, 86, 86, 8: 86, 86, 11: 86, 86, 86, 20: 86},
		{88, 88, 88, 88, 8: 88, 88, 11: 88, 88, 88},
		{10: 453},
		{82, 82, 82, 82, 8: 82, 82, 11: 82, 82, 82},
		// 250
		{4: 258, 293, 292, 290, 10: 264, 16: 68, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 403, 128: 455},
		{3: 134, 16: 134},
		{3: 138, 16: 138},
		{10: 458},
		{3: 136, 16: 136},
		// 255
		{10: 232, 92: 460},
		{4: 462, 93: 129, 105: 129, 165: 461},
		{93: 214, 103: 466, 105: 465},
		{10: 238, 91: 435, 115: 463},
		{2: 464},
		// 260
		{93: 128, 105: 128},
		{4: 467},
		{130, 130},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 468},
		{2: 469},
		// 265
		{127, 127, 3: 127, 166: 470},
		{125, 125, 3: 472, 167: 471},
		{131, 131},
		{124, 124, 4: 473},
		{4: 258, 293, 292, 290, 10: 264, 26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 249, 282, 283, 284, 286, 287, 288, 289, 285, 56: 248, 251, 59: 252, 253, 65: 256, 254, 250, 291, 243, 71: 260, 255, 259, 261, 257, 82: 263, 262, 247, 86: 265, 246, 244, 320, 94: 474},
		// 270
		{2: 475},
		{126, 126, 3: 126},
		{10: 167, 101: 483, 160: 482},
		{10: 232, 92: 478, 101: 479},
		{165, 165},
		// 275
		{100: 480},
		{10: 232, 92: 481},
		{164, 164},
		{10: 485},
		{100: 484},
		// 280
		{10: 166},
		{168, 168},
		{10: 232, 92: 487},
		{170, 170, 12: 242, 106: 488},
		{169, 169},
		// 285
		{102: 511},
		{102: 177},
		{10: 232, 92: 492, 101: 493},
		{4: 506},
		{25: 494},
		// 290
		{100: 495},
		{10: 232, 92: 496},
		{4: 497},
		{10: 238, 91: 498, 98: 499},
		{26: 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 274, 278, 279, 280, 281, 277, 43: 282, 283, 284, 286, 287, 288, 289, 285, 69: 505},
		// 295
		{2: 174, 174, 121: 500},
		{2: 172, 502, 122: 501},
		{2: 504},
		{2: 171, 10: 238, 91: 498, 98: 503},
		{2: 173, 173},
		// 300
		{175, 175},
		{191, 191, 191, 191},
		{10: 238, 91: 498, 98: 507},
		{2: 174, 174, 121: 508},
		{2: 172, 502, 122: 509},
		// 305
		{2: 510},
		{176, 176},
		{10: 180, 101: 513, 157: 512},
		{10: 516},
		{25: 514},
		// 310
		{100: 515},
		{10: 179},
		{169: 517},
		{10: 518},
		{4: 519},
		// 315
		{10: 520},
		{2: 521, 4: 522},
		{182, 182},
		{2: 523},
		{2: 524},
		// 320
		{181, 181},
		{195, 195},
		{10: 232, 92: 527},
		{99: 529, 108: 528},
		{10: 238, 91: 498, 98: 532},
		// 325
		{154: 530},
		{10: 238, 91: 531},
		{202, 202},
		{203, 203},
		{163, 163, 93: 214, 99: 211, 103: 226, 109: 206, 216, 112: 207, 217, 116: 208, 218, 209, 219, 220, 123: 221, 210, 222, 223, 215, 130: 212, 224, 136: 213, 225, 144: 534, 230, 227, 231, 228},
		// 330
		{42, 42},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = -1
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 182

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			k := yyXError{yystate, yyxchar}
			msg, ok := yyXErrors[k]
			if !ok {
				k.xsym = -1
				msg, ok = yyXErrors[k]
			}
			if !ok {
				msg = "syntax error"
			}
			if msg != "" {
				yylex.Error(msg)
			}
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.item = &alterTableAddStmt{tableName: yyS[yypt-2].item.(string), c: yyS[yypt-0].item.(*col)}
		}
	case 2:
		{
			yyVAL.item = &alterTableDropColumnStmt{tableName: yyS[yypt-3].item.(string), colName: yyS[yypt-0].item.(string)}
		}
	case 3:
		{
			yyVAL.item = assignment{colName: yyS[yypt-2].item.(string), expr: yyS[yypt-0].item.(expression)}
		}
	case 4:
		{
			yyVAL.item = append([]assignment{yyS[yypt-2].item.(assignment)}, yyS[yypt-1].item.([]assignment)...)
		}
	case 5:
		{
			yyVAL.item = []assignment{}
		}
	case 6:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]assignment), yyS[yypt-0].item.(assignment))
		}
	case 9:
		{
			yyVAL.item = beginTransactionStmt{}
		}
	case 10:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 11:
		{
			yyVAL.item = []expression{}
		}
	case 13:
		{
			yyVAL.item = &col{name: yyS[yypt-1].item.(string), typ: yyS[yypt-0].item.(int)}
		}
	case 15:
		{
			yyVAL.item = append([]string{yyS[yypt-2].item.(string)}, yyS[yypt-1].item.([]string)...)
		}
	case 16:
		{
			yyVAL.item = []string{}
		}
	case 17:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].item.(string))
		}
	case 20:
		{
			yyVAL.item = commitStmt{}
		}
	case 21:
		{
			yyVAL.item = &conversion{typ: yyS[yypt-3].item.(int), val: yyS[yypt-1].item.(expression)}
		}
	case 22:
		{
			indexName, tableName, columnName := yyS[yypt-5].item.(string), yyS[yypt-3].item.(string), yyS[yypt-1].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-8].item.(bool), ifNotExists: yyS[yypt-6].item.(bool), indexName: indexName, tableName: tableName, colName: columnName}
			if indexName == tableName || indexName == columnName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 23:
		{
			indexName, tableName, columnName := yyS[yypt-7].item.(string), yyS[yypt-5].item.(string), yyS[yypt-3].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-10].item.(bool), ifNotExists: yyS[yypt-8].item.(bool), indexName: indexName, tableName: tableName, colName: "id()"}
			if yyS[yypt-3].item.(string) != "id" {
				yylex.(*lexer).err("only the built-in function id() can be used in index: %s()", columnName)
				return 1
			}

			if indexName == tableName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 24:
		{
			yyVAL.item = false
		}
	case 25:
		{
			yyVAL.item = true
		}
	case 26:
		{
			yyVAL.item = false
		}
	case 27:
		{
			yyVAL.item = true
		}
	case 28:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 29:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{ifNotExists: true, tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 30:
		{
			yyVAL.item = []*col{}
		}
	case 31:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*col), yyS[yypt-0].item.(*col))
		}
	case 34:
		{
			yyVAL.item = &truncateTableStmt{yyS[yypt-0].item.(string)}
		}
	case 35:
		{
			yyVAL.item = &deleteStmt{tableName: yyS[yypt-1].item.(string), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 36:
		{
			yyVAL.item = &dropIndexStmt{ifExists: yyS[yypt-1].item.(bool), indexName: yyS[yypt-0].item.(string)}
		}
	case 37:
		{
			yyVAL.item = false
		}
	case 38:
		{
			yyVAL.item = true
		}
	case 39:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 40:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{ifExists: true, tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 41:
		{
			yyVAL.item = nil
		}
	case 43:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(oror, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 46:
		{
			yyVAL.item = append([]expression{yyS[yypt-2].item.(expression)}, yyS[yypt-1].item.([]expression)...)
		}
	case 47:
		{
			yyVAL.item = []expression(nil)
		}
	case 48:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]expression), yyS[yypt-0].item.(expression))
		}
	case 52:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-4].item.(expression), list: yyS[yypt-1].item.([]expression)}
		}
	case 53:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-5].item.(expression), not: true, list: yyS[yypt-1].item.([]expression)}
		}
	case 54:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-4].item, yyS[yypt-2].item, yyS[yypt-0].item, false); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 55:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-5].item, yyS[yypt-2].item, yyS[yypt-0].item, true); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 56:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-2].item.(expression)}
		}
	case 57:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-3].item.(expression), not: true}
		}
	case 59:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(ge, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 60:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('>', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 61:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(le, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 62:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('<', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 63:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(neq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 64:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(eq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 65:
		{
			yyVAL.item = &pLike{expr: yyS[yypt-2].item.(expression), pattern: yyS[yypt-0].item.(expression)}
		}
	case 66:
		{
			expr, name := yyS[yypt-1].item.(expression), yyS[yypt-0].item.(string)
			if name == "" {
				s, ok := expr.(*ident)
				if ok {
					name = s.s
				}
			}
			yyVAL.item = &fld{expr: expr, name: name}
		}
	case 67:
		{
			yyVAL.item = ""
		}
	case 68:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 69:
		{
			yyVAL.item = []*fld{yyS[yypt-0].item.(*fld)}
		}
	case 70:
		{
			l, f := yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld)
			if f.name != "" {
				if f := findFld(l, f.name); f != nil {
					yylex.(*lexer).err("duplicate field name %q", f.name)
					return 1
				}
			}

			yyVAL.item = append(yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld))
		}
	case 71:
		{
			yyVAL.item = &groupByRset{colNames: yyS[yypt-0].item.([]string)}
		}
	case 72:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 73:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-7].item.(string), colNames: yyS[yypt-6].item.([]string), lists: append([][]expression{yyS[yypt-3].item.([]expression)}, yyS[yypt-1].item.([][]expression)...)}
		}
	case 74:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-2].item.(string), colNames: yyS[yypt-1].item.([]string), sel: yyS[yypt-0].item.(*selectStmt)}
		}
	case 75:
		{
			yyVAL.item = []string{}
		}
	case 76:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 77:
		{
			yyVAL.item = [][]expression{}
		}
	case 78:
		{
			yyVAL.item = append(yyS[yypt-4].item.([][]expression), yyS[yypt-1].item.([]expression))
		}
	case 88:
		{
			yyVAL.item = value{yyS[yypt-0].item}
		}
	case 89:
		{
			n := yyS[yypt-0].item.(int)
			yyVAL.item = parameter{n}
			l := yylex.(*lexer)
			l.params = mathutil.Max(l.params, n)
			if n == 0 {
				l.err("parameter number must be non zero")
				return 1
			}
		}
	case 90:
		{
			yyVAL.item = &ident{yyS[yypt-0].item.(string)}
		}
	case 91:
		{
			yyVAL.item = &pexpr{expr: yyS[yypt-1].item.(expression)}
		}
	case 92:
		{
			yyVAL.item = &orderByRset{by: yyS[yypt-1].item.([]expression), asc: yyS[yypt-0].item.(bool)}
		}
	case 93:
		{
			yyVAL.item = true // ASC by default
		}
	case 94:
		{
			yyVAL.item = true
		}
	case 95:
		{
			yyVAL.item = false
		}
	case 98:
		{
			var err error
			if yyVAL.item, err = newIndex(yyS[yypt-1].item.(expression), yyS[yypt-0].item.(expression)); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 99:
		{
			var err error
			s := yyS[yypt-0].item.([2]*expression)
			if yyVAL.item, err = newSlice(yyS[yypt-1].item.(expression), s[0], s[1]); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 100:
		{
			x := yylex.(*lexer)
			f, ok := yyS[yypt-1].item.(*ident)
			if !ok {
				x.err("expected identifier or qualified identifier")
				return 1
			}

			var err error
			var agg bool
			if yyVAL.item, agg, err = newCall(f.s, yyS[yypt-0].item.([]expression)); err != nil {
				x.err("%v", err)
				return 1
			}
			if n := len(x.agg); n > 0 {
				x.agg[n-1] = x.agg[n-1] || agg
			}
		}
	case 102:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('^', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 103:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('|', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 104:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('-', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 105:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('+', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 107:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(andnot, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 108:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('&', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 109:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(lsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 110:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(rsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 111:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('%', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 112:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('/', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 113:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('*', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 115:
		{
			yyVAL.item = fmt.Sprintf("%s.%s", yyS[yypt-2].item.(string), yyS[yypt-0].item.(string))
		}
	case 116:
		{
			yyVAL.item = []interface{}{yyS[yypt-1].item, yyS[yypt-0].item}
		}
	case 118:
		{
			yyVAL.item = yyS[yypt-2].item
		}
	case 121:
		{
			yyVAL.item = ""
		}
	case 122:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 123:
		{
			yyVAL.list = []interface{}{yyS[yypt-0].item}
		}
	case 124:
		{
			yyVAL.list = append(yyS[yypt-2].list, yyS[yypt-0].item)
		}
	case 125:
		{
			yyVAL.item = rollbackStmt{}
		}
	case 126:
		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-8].item.(bool),
				flds:          yyS[yypt-7].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-5].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 127:
		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-9].item.(bool),
				flds:          yyS[yypt-8].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-6].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 128:
		{
			yyVAL.item = (*limitRset)(nil)
		}
	case 129:
		{
			yyVAL.item = &limitRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 130:
		{
			yyVAL.item = (*offsetRset)(nil)
		}
	case 131:
		{
			yyVAL.item = &offsetRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 132:
		{
			yyVAL.item = false
		}
	case 133:
		{
			yyVAL.item = true
		}
	case 134:
		{
			yyVAL.item = []*fld{}
		}
	case 135:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 136:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 137:
		{
			yyVAL.item = (*whereRset)(nil)
		}
	case 139:
		{
			yyVAL.item = (*groupByRset)(nil)
		}
	case 141:
		{
			yyVAL.item = (*orderByRset)(nil)
		}
	case 143:
		{
			yyVAL.item = [2]*expression{nil, nil}
		}
	case 144:
		{
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{nil, &hi}
		}
	case 145:
		{
			lo := yyS[yypt-2].item.(expression)
			yyVAL.item = [2]*expression{&lo, nil}
		}
	case 146:
		{
			lo := yyS[yypt-3].item.(expression)
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{&lo, &hi}
		}
	case 161:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = []stmt{yyS[yypt-0].item.(stmt)}
			}
		}
	case 162:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = append(yylex.(*lexer).list, yyS[yypt-0].item.(stmt))
			}
		}
	case 165:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(andand, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 168:
		{
			yyVAL.item = &truncateTableStmt{tableName: yyS[yypt-0].item.(string)}
		}
	case 193:
		{
			yyVAL.item = &updateStmt{tableName: yyS[yypt-3].item.(string), list: yyS[yypt-1].item.([]assignment), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 194:
		{
			yyVAL.item = nowhere
		}
	case 197:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('^', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 198:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('!', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 199:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('-', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 200:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('+', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 201:
		{
			yyVAL.item = &whereRset{expr: yyS[yypt-0].item.(expression)}
		}

	}

	if yyEx != nil && yyEx.Reduced(exState, r, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
